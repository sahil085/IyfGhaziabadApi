package com.IyfGZB.util;

import com.IyfGZB.domain.Seminar;
import com.IyfGZB.domain.SeminarAttendance;
import com.IyfGZB.domain.SeminarRecord;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.util.WorkbookUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.*;
import java.text.SimpleDateFormat;
import java.util.List;

/**
 * Created by sahil on 3/8/18.
 */
@Service
public class ExcelMaker {

    @Autowired
    GoogleDriveService driveService;


    public void makeAttendanceSheet(Seminar seminar, List<SeminarAttendance> seminarAttendances) {

        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");
        String date = simpleDateFormat.format(seminar.getDate());

        String[] columns = {"Seminar Title", "Speaker Name",
                "Date", "Class Level", "User Name", "Status"};
        // Create a Workbook
        Workbook workbook = new HSSFWorkbook(); // new HSSFWorkbook() for generating `.xls` file

        /* CreationHelper helps us create instances of various things like DataFormat,
           Hyperlink, RichTextString etc, in a format (HSSF, XSSF) independent way */
        CreationHelper createHelper = workbook.getCreationHelper();

        // Create a Sheet
        Sheet sheet = workbook.createSheet(seminar.getTitle() + " - " + date);

        // Create a Font for styling header cells
        Font headerFont = workbook.createFont();
        headerFont.setBold(true);
        headerFont.setFontHeightInPoints((short) 14);
        headerFont.setColor(IndexedColors.RED.getIndex());

        // Create a CellStyle with the font
        CellStyle headerCellStyle = workbook.createCellStyle();
        headerCellStyle.setFont(headerFont);

        // Create a Row
        Row headerRow = sheet.createRow(0);

        // Create cells

        for (int i = 0; i < columns.length; i++) {
            Cell cell = headerRow.createCell(i);
            cell.setCellValue(columns[i]);
            cell.setCellStyle(headerCellStyle);
        }

        // Create Cell Style for formatting Date
        CellStyle dateCellStyle = workbook.createCellStyle();
        dateCellStyle.setDataFormat(createHelper.createDataFormat().getFormat("dd-MM-yyyy"));

        // Create Other rows and cells with employees data
        int rowNum = 1;
        for (SeminarAttendance record : seminarAttendances) {
            Row row = sheet.createRow(rowNum++);

            row.createCell(0)
                    .setCellValue(record.getSeminar().getTitle());

            row.createCell(1)
                    .setCellValue(record.getSeminar().getSpeakerName());

            Cell dateOfBirthCell = row.createCell(2);
            dateOfBirthCell.setCellValue(record.getSeminar().getDate());
            dateOfBirthCell.setCellStyle(dateCellStyle);

            row.createCell(3)
                    .setCellValue(record.getSeminar().getCategory());

            row.createCell(4)
                    .setCellValue(record.getUser().getUsername());
            row.createCell(5)
                    .setCellValue(record.getAttendanceStatus());
        }

        // Resize all columns to fit the content size
        for (int i = 0; i < columns.length; i++) {
            sheet.autoSizeColumn(i);
        }

        // Write the output to a file
        ByteArrayOutputStream fileOut = null;
        fileOut = new ByteArrayOutputStream();
        try {

            workbook.write(fileOut);
            workbook.close();
//            driveService.uploadAttendanceExcelSheet(sheet.getSheetName(),fileOut.toByteArray());
        } catch (IOException e) {
            e.printStackTrace();
        }




        // Closing the workbook


//    In the above program, we first created a workbook using the XSSFWorkbook class. Then we created a Sheet named “Employee”. Once we got a Sheet, we created the header row and columns. The header cells were styled using a different font.
//
//        After creating the header row, we created other rows and columns from the employees list.
//
//        Next, we used sheet.autoSizeColumn() method to resize all the columns to fit the content size.
//
//        Finally, we wrote the output to a file. Following is the file generated by running the above program -
//
//        Create and Write to an Excel File in Java using Apache POI
//        Wow, that’s nice no? :)
//
//        Opening and Modifying an existing Excel file
//        The following method shows you how to open an existing excel file and update it -


        // Obtain a workbook from the excel file
//        Workbook workbook = WorkbookFactory.create(new File("existing-spreadsheet.xlsx"));
//
//        // Get Sheet at index 0
//        Sheet sheet = workbook.getSheetAt(0);
//
//        // Get Row at index 1
//        Row row = sheet.getRow(1);
//
//        // Get the Cell at index 2 from the above row
//        Cell cell = row.getCell(2);
//
//        // Create the cell if it doesn't exist
//        if (cell == null)
//        cell = row.createCell(2);
//
//        // Update the cell's value
//        cell.setCellType(CellType.STRING);
//        cell.setCellValue("Updated Value");
//
//        // Write the output to the file
//        FileOutputStream fileOut = new FileOutputStream("existing-spreadsheet.xlsx");
//        workbook.write(fileOut);
//        fileOut.close();
//
//        // Closing the workbook
//        workbook.close();


    }
}
